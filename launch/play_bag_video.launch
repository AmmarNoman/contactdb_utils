<launch>
    <arg name="data_dir" default="$(find contactdb_utils)/data/contactdb_data"/>
    <arg name="object_name"/>
    <arg name="p_id"/>
    <arg name="kinect_res" default="qhd"/>
    <arg name="registered" default="true"/>
    <arg name="old" default="false"/>
    <arg name="const_thermal_norm" default="false"/>

    <!-- play bag file -->
    <param name="use_sim_time" value="true"/>
    <node name="player" pkg="contactdb_utils" type="play_bag.sh" output="screen"
          required="true" args="$(arg data_dir) $(arg p_id) $(arg object_name)"/>

    <!-- correct calibration -->
    <node name="thermal_cinfo_changer" pkg="contactdb_utils"
          type="change_camera_info.py" args="$(arg old)" output="screen">
        <!-- input -->
        <remap from="cam_info_in" to="/deepgrasp/boson/camera_info_old"/>
        <!-- output -->
        <remap from="cam_info_out" to="/deepgrasp/boson/camera_info"/>
    </node>

    <!-- Static TF from Kinect RGB to Thermal -->
    <node name="tf_pub" pkg="contactdb_utils" type="tf_publisher.py"
          output="screen"/>
    <!-- extract the turntable frames from the bag's TF topic-->
    <node pkg="contactdb_utils" type="tf_remapper.py" name="tf_remapper"
          output="screen">
        <rosparam param="mappings">
            [{old: boson_frame, new: boson_frame_ignore}]
        </rosparam>
    </node>

    <group ns="deepgrasp">
        <!-- uncompress images -->
        <node name="republish_color" type="republish" pkg="image_transport"
              output="screen" required="true"
              args="compressed in:=kinect2/$(arg kinect_res)/image_color_rect
          raw out:=kinect2/$(arg kinect_res)/image_color_rect"/>
        <node name="republish_depth" type="republish" pkg="image_transport"
              output="screen" required="true"
              args="compressed in:=kinect2/$(arg kinect_res)/image_depth_rect
          raw out:=kinect2/$(arg kinect_res)/image_depth_rect"/>
        <node name="republish_thermal" type="republish" pkg="image_transport"
              output="screen" required="true"
              args="$(eval
              'compressed in:=boson/image_raw raw out:=boson/image_raw'
              if arg('old') else
              'compressed in:=boson/image_raw_raw raw out:=boson/image_raw_raw')"/>

        <!-- AGC and rectify the thermal image -->
        <include file="$(find contactdb_utils)/launch/thermal_proc.launch"
                 ns="boson">
            <arg name="old" value="$(arg old)"/>
            <arg name="const_norm" value="$(arg const_thermal_norm)"/>
        </include>

        <!-- register depth image to thermal image -->
        <node name="register" pkg="contactdb_utils" type="register_depth"
              output="screen" if="$(arg registered)">
            <!-- inputs -->
            <remap from="thermal_camera_info" to="boson/camera_info"/>
            <remap from="depth_camera_info"
                   to="kinect2/$(arg kinect_res)/camera_info"/>
            <remap from="depth_unregistered"
                   to="kinect2/$(arg kinect_res)/image_depth_rect"/>
            <!-- outputs -->
            <remap from="depth_registered"
                   to="kinect2/$(arg kinect_res)/depth_registered/image_rect"/>
        </node>

        <!-- sychronize and save -->
        <node name="filter" pkg="contactdb_utils" type="cloud_tf_sync_video"
              output="screen" required="true"
              args="$(arg data_dir)/$(arg p_id) $(arg object_name)">
            <!--inputs-->
            <!--NOTE: RGB image is not registered to the thermal image!-->
            <remap from="rgb_image"
                   to="kinect2/$(arg kinect_res)/image_color_rect"/>
            <remap from="thermal_image" to="boson/image_rect"/>
            <remap from="depth_image"
                   to="kinect2/$(arg kinect_res)/image_depth_rect"
                   unless="$(arg registered)"/>
            <remap from="depth_image"
                   to="kinect2/$(arg kinect_res)/depth_registered/image_rect"
                   if="$(arg registered)"/>
        </node>

    </group>

</launch>
